{"ast":null,"code":"//\nconst GET = \"GET\";\nconst POST = \"POST\";\nconst PUT = \"PUT\";\nconst DELETE = \"DELETE\"; //\n\nconst afterFetchDone = (fetchObj, callback) => {\n  // Callback(status, jsonData, okay)\n  fetchObj.then(res => Promise.all([res.status, res.json()])).then(([status, jsonData]) => {\n    const ok = status < 400;\n    console.log(jsonData);\n    console.log(status);\n\n    if (callback) {\n      callback(status, jsonData, ok);\n    }\n  }).catch(e => {\n    console.log(e.toString());\n\n    if (callback) {\n      callback(520, {\n        error: e\n      }, false);\n    }\n  });\n}; //\n\n\nexport class NodeFetchHelper {\n  static uploadUsingFormData(url, params, formData, callback) {\n    if (params) {\n      params = new URLSearchParams(params);\n      url = url + \"?\" + params;\n    }\n\n    const fetchObj = fetch(url, {\n      method: POST,\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: formData\n    });\n    afterFetchDone(fetchObj, callback);\n  }\n\n}\n\nNodeFetchHelper.get = (url, params, headers, callback) => {\n  if (params) {\n    params = new URLSearchParams(params);\n    url = url + \"?\" + params;\n  }\n\n  const fetchObj = fetch(url, {\n    method: GET,\n    headers: new Headers({ ...headers,\n      \"Content-Type\": \"application/json\"\n    })\n  });\n  afterFetchDone(fetchObj, callback);\n};\n\nNodeFetchHelper.post = (url, params, headers, body, callback) => {\n  if (params) {\n    params = new URLSearchParams(params);\n    url = url + \"?\" + params;\n  }\n\n  const fetchObj = fetch(url, {\n    method: POST,\n    headers: new Headers({ ...headers,\n      \"Content-Type\": \"application/json\"\n    }),\n    body: JSON.stringify({ ...body\n    })\n  });\n  afterFetchDone(fetchObj, callback);\n};\n\nNodeFetchHelper.put = (url, params, headers, body, callback) => {\n  if (params) {\n    params = new URLSearchParams(params);\n    url = url + \"?\" + params;\n  }\n\n  const fetchObj = fetch(url, {\n    method: PUT,\n    headers: new Headers({ ...headers,\n      \"Content-Type\": \"application/json\"\n    }),\n    body: JSON.stringify({ ...body\n    })\n  });\n  afterFetchDone(fetchObj, callback);\n};\n\nNodeFetchHelper.deletee = (url, params, headers, callback) => {\n  if (params) {\n    params = new URLSearchParams(params);\n    url = url + \"?\" + params;\n  }\n\n  const fetchObj = fetch(url, {\n    method: DELETE,\n    headers: new Headers({ ...headers,\n      \"Content-Type\": \"application/json\"\n    })\n  });\n  afterFetchDone(fetchObj, callback);\n};\n\nNodeFetchHelper.upload = (url, params, fileKeyString, fileObj, callback) => {\n  if (params) {\n    params = new URLSearchParams(params);\n    url = url + \"?\" + params;\n  }\n\n  var formData = new FormData();\n  formData.append('type', 'file');\n  formData.append(fileKeyString, fileObj);\n  const fetchObj = fetch(url, {\n    method: POST,\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: formData\n  });\n  afterFetchDone(fetchObj, callback);\n};","map":{"version":3,"sources":["/home/dark/office/Main/BiCellReact/src/Others/NodeFetchHelper.js"],"names":["GET","POST","PUT","DELETE","afterFetchDone","fetchObj","callback","then","res","Promise","all","status","json","jsonData","ok","console","log","catch","e","toString","error","NodeFetchHelper","uploadUsingFormData","url","params","formData","URLSearchParams","fetch","method","headers","body","get","Headers","post","JSON","stringify","put","deletee","upload","fileKeyString","fileObj","FormData","append"],"mappings":"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","sourcesContent":["\n\n//\nconst GET = \"GET\";\nconst POST = \"POST\";\nconst PUT = \"PUT\";\nconst DELETE = \"DELETE\";\n\n//\nconst afterFetchDone = (fetchObj, callback) => {\n    // Callback(status, jsonData, okay)\n\n    fetchObj\n        .then(res => Promise.all([res.status, res.json()]))\n        .then(([status, jsonData]) => {\n            const ok = status < 400;\n            console.log(jsonData);\n            console.log(status);\n            if (callback) {\n                callback(status, jsonData, ok)\n            }\n        })\n        .catch((e) => {\n            console.log(e.toString());\n            if (callback) {\n                callback(520, {\n                    error: e,\n                }, false)\n            }\n        })\n}\n\n//\nexport class NodeFetchHelper {\n    static get = (url, params, headers, callback) => {\n        if (params) {\n            params = new URLSearchParams(params);\n            url = url + \"?\" + params\n        }\n\n        const fetchObj = fetch(url, {\n            method: GET,\n            headers: new Headers({\n                ...headers,\n                \"Content-Type\": \"application/json\",\n            })\n        })\n        afterFetchDone(fetchObj, callback)\n    }\n\n    static post = (url, params, headers, body, callback) => {\n        if (params) {\n            params = new URLSearchParams(params);\n            url = url + \"?\" + params\n        }\n\n        const fetchObj = fetch(url, {\n            method: POST,\n            headers: new Headers({\n                ...headers,\n                \"Content-Type\": \"application/json\",\n            }),\n            body: JSON.stringify({\n                ...body\n            })\n        })\n        afterFetchDone(fetchObj, callback)\n    }\n\n    static put = (url, params, headers, body, callback) => {\n        if (params) {\n            params = new URLSearchParams(params);\n            url = url + \"?\" + params\n        }\n\n        const fetchObj = fetch(url, {\n            method: PUT,\n            headers: new Headers({\n                ...headers,\n                \"Content-Type\": \"application/json\",\n            }),\n            body: JSON.stringify({\n                ...body\n            })\n        })\n        afterFetchDone(fetchObj, callback)\n    }\n\n    static deletee = (url, params, headers, callback) => {\n        if (params) {\n            params = new URLSearchParams(params);\n            url = url + \"?\" + params\n        }\n\n        const fetchObj = fetch(url, {\n            method: DELETE,\n            headers: new Headers({\n                ...headers,\n                \"Content-Type\": \"application/json\",\n            })\n        })\n        afterFetchDone(fetchObj, callback)\n    }\n\n    static upload = (url, params, fileKeyString, fileObj, callback) => {\n        if (params) {\n            params = new URLSearchParams(params);\n            url = url + \"?\" + params\n        }\n\n        var formData = new FormData()\n        formData.append('type', 'file')\n        formData.append(fileKeyString, fileObj)\n\n        const fetchObj = fetch(url, {\n            method: POST,\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: formData\n        })\n        afterFetchDone(fetchObj, callback)\n    }\n\n    static uploadUsingFormData(url, params, formData, callback) {\n        if (params) {\n            params = new URLSearchParams(params);\n            url = url + \"?\" + params\n        }\n\n        const fetchObj = fetch(url, {\n            method: POST,\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: formData\n        })\n        afterFetchDone(fetchObj, callback)\n    }\n}\n"]},"metadata":{},"sourceType":"module"}